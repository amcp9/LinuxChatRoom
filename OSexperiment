1、课程设计内容：在linux系统用C/C++语言编写一个多用户的聊天室管理系统
个人项目已实现主要功能： 
（1）做到3个以上用户之间的聊天；
（2）系统用户管理；
（3）用户设置权限（拒收群聊）(接收群聊)；
（4）私聊（悄悄话）；
（5）上线下线提醒
2、项目已涉及到的技术：
（1）	LINUX父子进程编程
（2）	LINUX进程通信技术
（3）	LINUX消息队列技术
3、项目中使用的数据结构：
（1）消息结构体:msg
	long mtype;	//方便设置为各种参数以备msgrev选择接收
    int subtype; 	//子进程msgrev消息并进行switch拓展
    int pid;			//getpid()进程pid
    int chatid;		//私聊识别号
    char *chatname;	//私聊识别号
    char nick_name[N];	//登录用户名
char mtext[N];		//消息正文
（2）服务器端在线用户结构体：
  	  int data;		//用户pid
   	 char *name;	//用户登录名nick_name
   	 node *next;	//链表指针
ser.c
#include <stdio.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <signal.h>
#define TYPE_SRV 10
#define N 128
struct msgbuf{
    long mtype;
    int subtype;
    int pid;
    int chatid;
    char *chatname;
    char nick_name[N];
    char mtext[N];
};
#define MSG_LEN (sizeof(struct msgbuf) - sizeof(long)) //去除msgrev的mtype
typedef struct _node_{
    int data;
    char *name;
    struct _node_ *next;
}listnode,*linklist;//结点的数据结构，data为client进程pid

void Broadcast(linklist h,int msgid,struct msgbuf *msg);
linklist CreateLinklist(); //创建链表
int Length(linklist h);     //获取链表长度
int Empty(linklist h);      //判断链表是否为空
int Insert(linklist h,int value,char *q);   //插入
void Delete(linklist h,int value);  //删除
int GetValue(linklist h,int pos);   //获取data
long searchName(linklist h,char *q);
int main(int argc,char *argv[])
{
    key_t key;
    int msgid;
    pid_t pid;
    struct msgbuf msg;
    //生成key
    if((key = ftok("./",'s')) < 0){
        perror("ftok error.");
        exit(-1);
    }
    //服务器进程创建创建消息队列
    if((msgid = msgget(key,IPC_CREAT|0666)) < 0){
        perror("msgget error.");
        exit(-1);
    }
    //使用fork创建子进程
    if((pid = fork()) < 0){
        perror("error to fork.");
        exit(-1);
    }
    else if(pid == 0){//子进程实现转发
        //创建单链表
        linklist h;
        h = CreateLinklist();
        while(1)
        {
            if(msgrcv(msgid,&msg,MSG_LEN,TYPE_SRV,0) < 0)
            {
                perror("msgrcv error.\n");
                exit(1);
            }
            //对接收到的子进程进行类型判断
            switch(msg.subtype)
            {
                case 1 :    //上线，插入至链表尾
                    if(Insert(h,msg.pid,msg.nick_name) != 0){
                        printf("insert error.\n");
                        exit(-1);
                    }
                    printf("******用户：%s**pid：%d- 上线******\n",msg.nick_name,msg.pid);
                    Broadcast(h,msgid,&msg);
                    break;
                case 2 :    //广播群聊
                    Broadcast(h,msgid,&msg);
                    //若收到控制台来的quit要求，在广播完以后，自己退出(不然会出现无限循环)
                    if(strncmp(msg.mtext,"quit",4)==0){
                        exit(0);
                    }
                    break;
                case 3 :    //下线
                    if(!Empty(h)){
                        Delete(h,msg.mtype);
                    }
                    printf("******用户：%s**pid：%d- 下线******\n",msg.nick_name,msg.pid);
                    Broadcast(h,msgid,&msg);
                    sleep(1);
                    break;
                case 4:
                   // printf("%s",msg.chatname);
                    msg.mtype=msg.chatid;
                    //msg.mtype=msg.chatid;
                    msg.subtype=4;
                    msgsnd(msgid,&msg,MSG_LEN,0);
                    break;
                case 5:
                    Delete(h,msg.pid);
                    break;
                case 6:
                    Insert(h,msg.pid,msg.nick_name);
                    break;
                default:
                    break;
            }
        }
    }
    else{//父进程用于服务器控制台
        msg.mtype = TYPE_SRV;   //因为不知道有多少个客户端，发给服务器后再转发
        msg.subtype = 2;
        while(1)
        {
            printf("[服务器控制台]\n");
            fgets(msg.mtext,N,stdin);
            //控制台收到quit时，通知客户端
            if(strncmp(msg.mtext,"quit",4) == 0){
                msgsnd(msgid,&msg,MSG_LEN,0);
                sleep(2);
                msgctl(msgid,IPC_RMID,NULL);//删除消息队列,否则消息队列会满并影响操作
                kill(pid,SIGKILL);
                exit(0);
            }
        }
    }
    return 0;
}
void Broadcast(linklist h,int msgid,struct msgbuf *msg)
{
    int i;
    for(i = 0;i < Length(h);i++)//给链表每一个data发送消息
    {
        msg->mtype = GetValue(h,i);
        if(msg->mtype != msg->pid){
            msgsnd(msgid,msg,MSG_LEN,0);
        }
    }
    
}
//初始化linklist
linklist CreateLinklist()
{
    linklist h;
    h = (linklist)malloc(sizeof(listnode));
    h->next = NULL;
    
    return h;
}
//获取链表长度
int Length(linklist h)
{
    int n = 0;
    h = h->next;
    while(h)
    {
        n++;
        h = h->next;
    }
    return n;
}
//判断链表是否为空
int Empty(linklist h)
{
    return (NULL == h->next);
}
//链表中插入节点
int Insert(linklist h,int value,char *q)
{
    linklist p;
    p = (linklist)malloc(sizeof(listnode));
    p->data = value;
    p->name = q;
    p->next = NULL;
    while(h->next)
    {
        h = h->next;
    }
    
    h->next = p;
    return 0;
}
//删除值为进程pid的结点
void Delete(linklist h,int value)
{
    linklist p = h->next;
    while(p)
    {
        if(p->data == value){
            h->next = p->next;
            free(p);
            p = h->next;
        }
        else{
            h = p;
            p = h->next;
        }
    }
    return;
}
long searchName(linklist h,char *q)
{
    linklist p = h->next;
    while(p)
    {
        if (p->name==q) {
            return p->data;
        }
    }
    return 0;
}
int GetValue(linklist h,int pos)
{
    h = h->next;
    while(pos--)
    {
        h = h->next;
    }
    return h->data;
}


cli.c
#include <stdio.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <signal.h>
#define _DEBUG_
#define TYPE_SRV 10 //10是server的mtype
#define N 128
struct msgbuf{
    long mtype;
    int subtype;    //1上线 2群聊 3下线 4私聊 5免打扰 6 取消免打扰
    int pid;
    int chatid;
    char *chatname;
    char nick_name[N];
    char mtext[N];
};
//定义正文大小
#define MSG_LEN (sizeof(struct msgbuf) - sizeof(long))
int main(int argc,char *argv[])
{
    key_t key;
    int msgid;
    pid_t pid;
    char *tempname;
    int TYPE_ME;    //由getpid()来获取mtype
    //msg.chatname=NULL;
    struct msgbuf msg;
    TYPE_ME = getpid(); //用自己进程的进程号作为自己收消息的消息类型
    //argv[1]用于接收昵称
    if(argc < 2){
        printf("Usage:%s <nick_name>\n",argv[0]);
        exit(-1);
    }
    //生成消息队列的key
    if((key = ftok("./",'s')) < 0){
        perror("ftok error.");
        exit(-1);
    }
    
    //如果服务器已创建消息队列才可打开，客户端无权创建
    if((msgid = msgget(key,0666)) < 0){
        printf("******服务器未开启******\n");
        exit(-1);
    }
    //每启动一个客户端要先实现一个注册操作
    msg.mtype = TYPE_SRV;
    msg.subtype = 1;
    msg.pid = getpid();
    strcpy(msg.nick_name,argv[1]);  //用户名写入msg
    msgsnd(msgid,&msg,MSG_LEN,0);   //MSG_LEN是消息正文大小
    
    //父子进程操作读写
    if((pid = fork()) < 0){
        perror("error");
        exit(-1);
    }
    else if(pid == 0){ //子进程负责读
        while(1)
        {
            //msgid为消息队列的队列ID
            //&msg为消息类型为TYPE_ME的消息缓冲区首地址
            //recive类型为阻塞
            msgrcv(msgid,&msg,MSG_LEN,TYPE_ME,0);
            
            //判断接收到的消息是否为quit
            if(strncmp(msg.mtext,"quit",4) == 0){
                printf("**********服务器关闭**********\n");
                kill(getppid(),SIGUSR1);//若收到quit通知父进程并自己退出
                exit(0);
            }
            if(strncmp(msg.mtext,"exit",4) == 0){
                msg.subtype = 3;
            }
            
            //switch
            switch(msg.subtype)
            {
                case 1 ://上线通知
                    printf("***%s上线***\n",msg.nick_name);
                    break;
                case 2 :
                    printf("[%s]\n",msg.nick_name);
                    printf("%s",msg.mtext);
                    break;
                case 3 ://下线通知
                    printf("***%s下线***",msg.nick_name);
                    break;
                case 4:
                    printf("[你收到了来自%s的私聊]:%s",msg.nick_name,msg.mtext);
                default :
                    break;
            }
        }
    }
    else{   //父进程写
        msg.mtype = TYPE_SRV;   //serv的mtype
        msg.subtype = 2;    //群聊模式
        while(1)
        {
            printf("[%s]\n",msg.nick_name);
            fgets(msg.mtext,N,stdin);
            msgsnd(msgid,&msg,MSG_LEN,0);
            //判断用户是否输入exit，并通知serv
            if(strncmp(msg.mtext,"exit",4) == 0){
                msg.subtype = 3;
                msgsnd(msgid,&msg,MSG_LEN,0);
                sleep(2);
                kill(pid,SIGKILL);
                exit(0);
            }
            if(strncmp(msg.mtext,"chat",4) == 0){
                msg.subtype = 4;
                printf("私聊到:");
                scanf("%d",&msg.chatid);
               // msg.chatname=tempname;
                //fgets(*(msg.chatname), 99, stdin);
                
                //fgets(msg.mtext,N,stdin);
                msgsnd(msgid,&msg,MSG_LEN,0);
            }
            if(strncmp(msg.mtext,"room",4) == 0){
                msg.subtype = 2;
                printf("[你已回到公共聊天室]\n");
            }
            if(strncmp(msg.mtext,"reje",4) == 0){
                msg.subtype = 5;
                printf("[你已开启勿打扰模式！]\n");
                msgsnd(msgid,&msg,MSG_LEN,0);

            }
            if(strncmp(msg.mtext,"back",4) == 0){
                msg.subtype = 6;
                printf("[勿扰模式已关闭！]\n");
                msgsnd(msgid,&msg,MSG_LEN,0);
                msg.subtype = 2;
            }
        }
    }
    return 0;
}
